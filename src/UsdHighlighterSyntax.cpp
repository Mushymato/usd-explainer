// syntax definitions, auto-generated by convert_tmlLanguage.py
#include "UsdHighlighter.h"

void UsdHighlighter::initSyntaxRules()
{
    SyntaxRule rule = SyntaxRule();
    QTextCharFormat format = QTextCharFormat();
    rule.name = QStringLiteral("keyword.control.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\\b(def|over|class|variantSet)\\b"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(116, 157, 238));
    format.setFontWeight(QFont::Weight::Bold);
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("keyword.operator.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\\b(add|append|prepend|delete)\\b"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(81, 249, 255));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("keyword.import.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\\#usda\\W[0-9]+.[0-9]"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(255, 123, 68));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("keyword.other.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\\b(attributes|config|connect|customData|default|dictionary|displayUnit|doc|inherits|kind|mapper|nameChildren|None|offset|payload|permission|prefixSubstitutions|properties|references|relocates|reorder|rootPrims|scale|subLayers|suffixSubstitutions|specializes|symmetryArguments|symmetryFunction|timeSamples|variants|variantSets)\\b"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(255, 214, 162));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("storage.type.usd.base");
    rule.pattern = QRegularExpression(QStringLiteral("\\b(bool|uchar|int|uint|int64|uint64|half|float|double|string|token|asset|matrix2d|matrix3d|matrix4d|quatd|quatf|quath|double2|float2|half2|int2|double3|float3|half3|int3|double4|float4|half4|int4|rel)\\b"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(78, 177, 130));
    format.setFontWeight(QFont::Weight::Normal);
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("storage.type.usd.ext");
    rule.pattern = QRegularExpression(QStringLiteral("\\b(point3d|point3f|point3h|normal3d|normal3f|normal3h|vector3d|vector3f|vector3h|color3d|color3f|color3h|color4d|color4f|color4h|frame4d|texCoord2h|texCoord2d|texCoord2f|texCoord3h|texCoord3d|texCoord3f)\\b"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(255, 123, 55));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("storage.modifier.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\\b(varying|uniform|custom)\\b"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(188, 135, 180));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("variable.parameter.usda");
    rule.pattern = QRegularExpression(QStringLiteral("([a-zA-Z_:][a-zA-Z0-9_:]*)"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(255, 116, 88));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("constant.numeric.float.usda");
    rule.pattern = QRegularExpression(QStringLiteral("((0(x|X)[0-9a-fA-F]*)|-?(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(92, 77, 255));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("constant.character.escape.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\\\\."));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(255, 255, 145));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("string.quoted.triple.asset.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\\@\\@\\@"));
    rule.patternEnd = QRegularExpression(QStringLiteral("\\@\\@\\@"));
    rule.isRange = true;
    rule.isMultiline = false;
    format.setForeground(QColor(190, 87, 232));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("string.quoted.double.usd");
    rule.pattern = QRegularExpression(QStringLiteral("\""));
    rule.patternEnd = QRegularExpression(QStringLiteral("\""));
    rule.isRange = true;
    rule.isMultiline = false;
    format.setForeground(QColor(190, 87, 232));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("string.quoted.double.asset.usd");
    rule.pattern = QRegularExpression(QStringLiteral("@"));
    rule.patternEnd = QRegularExpression(QStringLiteral("@"));
    rule.isRange = true;
    rule.isMultiline = false;
    format.setForeground(QColor(190, 87, 232));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("string.quoted.double.path.usd");
    rule.pattern = QRegularExpression(QStringLiteral("<"));
    rule.patternEnd = QRegularExpression(QStringLiteral(">"));
    rule.isRange = true;
    rule.isMultiline = false;
    format.setForeground(QColor(190, 87, 232));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("comment.block.usd");
    rule.pattern = QRegularExpression(QStringLiteral("(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?"));
    rule.patternEnd = QRegularExpression(QStringLiteral("\\*/"));
    rule.isRange = true;
    rule.isMultiline = true;
    format.setForeground(QColor(63, 217, 168));
    rule.format = format;
    syntaxRules.append(rule);
    rule.name = QStringLiteral("comment.line.hash.usd");
    rule.pattern = QRegularExpression(QStringLiteral("(^[ \\t]+)?((\\#)(?:\\s*((@)internal)(?=\\s|$))?).+"));
    rule.isRange = false;
    rule.isMultiline = false;
    format.setForeground(QColor(63, 217, 168));
    rule.format = format;
    syntaxRules.append(rule);
}
