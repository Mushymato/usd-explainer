// singleton class describing rules for USD language, auto-generated by syntax_definitions_to_cpp.py
#include "UsdHighlighterSyntax.h"

UsdHighlighterSyntax::UsdHighlighterSyntax()
{
    // styles
    QTextCharFormat style_comment = QTextCharFormat();
    style_comment.setForeground(QColor(63, 217, 168));
    QTextCharFormat style_import = QTextCharFormat();
    style_import.setForeground(QColor(79, 71, 225));
    QTextCharFormat style_keyword = QTextCharFormat();
    style_keyword.setForeground(QColor(0, 153, 255));
    QTextCharFormat style_number = QTextCharFormat();
    style_number.setForeground(QColor(58, 87, 255));
    QTextCharFormat style_operator = QTextCharFormat();
    style_operator.setForeground(QColor(51, 204, 0));
    QTextCharFormat style_path = QTextCharFormat();
    style_path.setForeground(QColor(118, 231, 241));
    QTextCharFormat style_string = QTextCharFormat();
    style_string.setForeground(QColor(255, 153, 0));
    QTextCharFormat style_type = QTextCharFormat();
    style_type.setForeground(QColor(223, 195, 110));
    style_type.setFontWeight(QFont::Weight::Bold);
    QTextCharFormat style_variable = QTextCharFormat();
    style_variable.setForeground(QColor(255, 204, 255));
    // rules
    syntaxRules = QList<SyntaxRule>();
    SyntaxRule rule;
    // import.usd
    rule = SyntaxRule();
    rule.name = QStringLiteral("import.usd");
    rule.styles.append(style_import);
    rule.pattern = QRegularExpression(QStringLiteral("\\#usda\\W[0-9]+.[0-9]"));
    rule.label = QStringLiteral("import.usd");
    syntaxRules.append(rule);
    // keyword.definePrim
    rule = SyntaxRule();
    rule.name = QStringLiteral("keyword.definePrim");
    rule.styles.append(style_keyword);
    rule.styles.append(style_keyword);
    rule.styles.append(style_type);
    rule.styles.append(style_string);
    rule.pattern = QRegularExpression(QStringLiteral("(def|over)(?: ([a-zA-Z_:][a-zA-Z0-9_:]*))? (\".+\")"));
    rule.label = QStringLiteral("Define a prim in this layer, or override a prim defined elsewhere on the layer stack");
    syntaxRules.append(rule);
    // keyword.operator
    rule = SyntaxRule();
    rule.name = QStringLiteral("keyword.operator");
    rule.styles.append(style_operator);
    rule.pattern = QRegularExpression(QStringLiteral("\\b(add|append|prepend|delete)\\b"));
    rule.label = QStringLiteral("Operate on a list property");
    syntaxRules.append(rule);
    // keyword.misc
    rule = SyntaxRule();
    rule.name = QStringLiteral("keyword.misc");
    rule.styles.append(style_keyword);
    rule.pattern = QRegularExpression(QStringLiteral("\\b(attributes|config|connect|customData|default|dictionary|displayUnit|doc|inherits|kind|mapper|nameChildren|None|offset|payload|permission|prefixSubstitutions|properties|references|relocates|reorder|rootPrims|scale|subLayers|suffixSubstitutions|specializes|symmetryArguments|symmetryFunction|timeSamples|variants|variantSets)\\b"));
    rule.label = QStringLiteral("Keyword");
    syntaxRules.append(rule);
    // path.asset
    rule = SyntaxRule();
    rule.name = QStringLiteral("path.asset");
    rule.styles.append(style_path);
    rule.pattern = QRegularExpression(QStringLiteral("@"));
    rule.patternEnd = QRegularExpression(QStringLiteral("@"));
    rule.isRange = true;
    rule.label = QStringLiteral("Path referencing data outside of this layer, e.g. from different file");
    syntaxRules.append(rule);
    // path.scene
    rule = SyntaxRule();
    rule.name = QStringLiteral("path.scene");
    rule.styles.append(style_path);
    rule.pattern = QRegularExpression(QStringLiteral("<"));
    rule.patternEnd = QRegularExpression(QStringLiteral(">"));
    rule.isRange = true;
    rule.label = QStringLiteral("Path referencing scenegraph location");
    syntaxRules.append(rule);
    // string
    rule = SyntaxRule();
    rule.name = QStringLiteral("string");
    rule.styles.append(style_string);
    rule.pattern = QRegularExpression(QStringLiteral("\""));
    rule.patternEnd = QRegularExpression(QStringLiteral("\""));
    rule.isRange = true;
    rule.label = QStringLiteral("String literal");
    syntaxRules.append(rule);
    // number
    rule = SyntaxRule();
    rule.name = QStringLiteral("number");
    rule.styles.append(style_number);
    rule.pattern = QRegularExpression(QStringLiteral("((0(x|X)[0-9a-fA-F]*)|-?(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)"));
    rule.label = QStringLiteral("Numeric literal");
    syntaxRules.append(rule);
    // variable.property
    rule = SyntaxRule();
    rule.name = QStringLiteral("variable.property");
    rule.styles.append(style_variable);
    rule.styles.append(style_keyword);
    rule.styles.append(style_keyword);
    rule.styles.append(style_type);
    rule.styles.append(style_variable);
    rule.pattern = QRegularExpression(QStringLiteral("\\b(custom )?(uniform )?(bool|uchar|int|uint|int64|uint64|half|float|double|string|token|asset|matrix2d|matrix3d|matrix4d|quatd|quatf|quath|double2|float2|half2|int2|double3|float3|half3|int3|double4|float4|half4|int4|rel|point3d|point3f|point3h|normal3d|normal3f|normal3h|vector3d|vector3f|vector3h|color3d|color3f|color3h|color4d|color4f|color4h|frame4d|texCoord2h|texCoord2d|texCoord2f|texCoord3h|texCoord3d|texCoord3f|class|variantSet)(:?\\[\\])? \\b([a-zA-Z_:][a-zA-Z0-9_:]*)\\b"));
    rule.label = QStringLiteral("A property on this prim. It can be marked custom (non-schema) and/or uniform (unvarying)");
    syntaxRules.append(rule);
    // variable.metadatum
    rule = SyntaxRule();
    rule.name = QStringLiteral("variable.metadatum");
    rule.styles.append(style_variable);
    rule.pattern = QRegularExpression(QStringLiteral("([a-zA-Z_:][a-zA-Z0-9_:]*)"));
    rule.label = QStringLiteral("A metadatum on this object. Metadata are unvarying and whose name and type is determined by USD");
    syntaxRules.append(rule);
    // comment.block
    rule = SyntaxRule();
    rule.name = QStringLiteral("comment.block");
    rule.styles.append(style_comment);
    rule.pattern = QRegularExpression(QStringLiteral("/\\*"));
    rule.patternEnd = QRegularExpression(QStringLiteral("\\*/"));
    rule.isRange = true;
    rule.isMultiline = true;
    rule.label = QStringLiteral("Block comment");
    syntaxRules.append(rule);
    // comment.line
    rule = SyntaxRule();
    rule.name = QStringLiteral("comment.line");
    rule.styles.append(style_comment);
    rule.pattern = QRegularExpression(QStringLiteral("(:?^[ \\t]+)?\\#.+"));
    rule.label = QStringLiteral("Line comment");
    syntaxRules.append(rule);
}
