{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "USD",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#storage"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#number"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.prim.usd",
          "match": "\\b(def|over)(?: ([a-zA-Z_:][a-zA-Z0-9_:]*)?\\b",
          "label": "Prim \\1 \\2",
          "detail": {
            "1": {
              "def": "Define a prim in this layer",
              "over": "Override data of prim, if prim is defined elsewhere the composition arc"
            },
            "2": {
              "*": "with type name \\2"
            }
          }
        },
        {
          "name": "keyword.operator.usd",
          "match": "\\b(add|append|prepend|delete)\\b",
          "label": "operator \\1",
          "detail": {
            "1": {
              "add": "Add to list",
              "append": "Append to end of list",
              "prepend": "Prepend before start of list",
              "delete": "Remove from list"
            }
          }
        },
        {
          "name": "keyword.import.usd",
          "match": "\\#usda\\W[0-9]+.[0-9]"
        },
        {
          "name": "keyword.other.usd",
          "label": "keyword \\1",
          "match": "\\b(attributes|config|connect|customData|default|dictionary|displayUnit|doc|inherits|kind|mapper|nameChildren|None|offset|payload|permission|prefixSubstitutions|properties|references|relocates|reorder|rootPrims|scale|subLayers|suffixSubstitutions|specializes|symmetryArguments|symmetryFunction|timeSamples|variants|variantSets)\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.usd.base",
          "match": "\\b(bool|uchar|int|uint|int64|uint64|half|float|double|string|token|asset|matrix2d|matrix3d|matrix4d|quatd|quatf|quath|double2|float2|half2|int2|double3|float3|half3|int3|double4|float4|half4|int4|rel)\\b",
          "label": "type \\1"
        },
        {
          "name": "storage.type.usd.ext",
          "match": "\\b(point3d|point3f|point3h|normal3d|normal3f|normal3h|vector3d|vector3f|vector3h|color3d|color3f|color3h|color4d|color4f|color4h|frame4d|texCoord2h|texCoord2d|texCoord2f|texCoord3h|texCoord3d|texCoord3f|class|variantSet)\\b",
          "label": "type \\1"
        },
        {
          "name": "storage.modifier.usd",
          "match": "\\b(varying|uniform|custom)\\b",
          "label": "modifier \\1",
          "detail": {
            "1": {
              "varying": "Attribute can vary across time-samples",
              "uniform": "Attribute is constant across time-samples",
              "custom": "Property is custom"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.parameter.usda",
          "match": "([a-zA-Z_:][a-zA-Z0-9_:]*)"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.float.usda",
          "match": "((0(x|X)[0-9a-fA-F]*)|-?(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)"
        }
      ]
    },
    "strings": {
      "name": "",
      "patterns": [
        {
          "name": "constant.character.escape.usd",
          "match": "\\\\."
        },
        {
          "name": "string.quoted.triple.asset.usd",
          "begin": "\\@\\@\\@",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.asset.usd"
            }
          },
          "end": "\\@\\@\\@",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.asset.usd"  
            }
          }
        },
        {
          "name": "string.quoted.double.usd",
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "string.quoted.double.asset.usd",
          "begin": "@",
          "end": "@"
        },
        {
          "name": "string.quoted.double.path.usd",
          "begin": "<",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.path.usd"
            }
          },
          "end": ">"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.usd",
          "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.usd"
            },
            "2": {
              "name": "storage.type.internaldeclaration.usd"
            },
            "3": {
              "name": "punctuation.decorator.internaldeclaration.usd"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.usd"
            }
          }
        },
        {
          "name": "comment.line.hash.usd",
          "match": "(^[ \\t]+)?((\\#)(?:\\s*((@)internal)(?=\\s|$))?).+"
        }
      ]
    }
  },
  "scopeName": "source.usd"
}