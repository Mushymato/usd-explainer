import json
from hashlib import sha256


def hash_color(name):
    hashbytes = sha256(name.encode("UTF-8")).digest()
    return [
        min(255, int.from_bytes((bt,), byteorder="big") + 50) for bt in hashbytes[-3:]
    ]


def write_regex(expr, fn, member):
    fn.write("    ")
    fn.write(f"rule.{member}")
    fn.write(' = QRegularExpression(QStringLiteral("')
    fn.write(expr.replace("\\", "\\\\").replace('"', '\\"'))
    fn.write('"));\n')


def write_color(name, category, is_range, fn):
    if is_range or category == "comment":
        color = hash_color(category)
    else:
        color = hash_color(name)
    fn.write("    format.setForeground(QColor({}, {}, {}));\n".format(*color))


def write_cpp_block(pattern, category, fn, is_bold):
    """Write a block of C++ code that define and append syntax rule"""
    name = pattern.get("name", pattern.get("contentName")) or "unnamed rule"
    if name:
        # fn.write("    // ")
        # fn.write(name)
        # fn.write("\n")
        fn.write('    rule.name = QStringLiteral("')
        fn.write(name)
        fn.write('");')
    try:
        is_range = False
        write_regex(pattern["match"], fn, "pattern")
        fn.write("    rule.isRange = false;\n")
    except KeyError:
        is_range = True
        write_regex(pattern["begin"], fn, "pattern")
        write_regex(pattern["end"], fn, "patternEnd")
        fn.write("    rule.isRange = true;\n")
    if name == "comment.block.usd":
        fn.write("    rule.isMultiline = true;\n")
    else:
        fn.write("    rule.isMultiline = false;\n")
    write_color(name, category, is_range, fn)
    if category == "keywords":
        if not is_bold:
            fn.write("    format.setFontWeight(QFont::Weight::Bold);\n")
            is_bold = True
    elif is_bold:
        fn.write("    format.setFontWeight(QFont::Weight::Normal);\n")
        is_bold = False
    fn.write("    rule.format = format;\n")
    fn.write("    syntaxRules.append(rule);\n")
    return is_bold


def build_cpp():
    with open("src/syntax/usd.tmLanguage.json", "r") as fn:
        data = json.load(fn)

    with open("src/UsdExplainerSyntax.cpp", "w") as fn:
        fn.write(
            """// syntax definitions, generated by convert_tmlLanguage.py
#include "UsdExplainer.h"

void UsdExplainer::initSyntaxRules()
{
    SyntaxRule rule = SyntaxRule();
    QTextCharFormat format = QTextCharFormat();
"""
        )
        is_bold = False
        for category, cat_data in data["repository"].items():
            for pattern in cat_data["patterns"]:
                is_bold = write_cpp_block(pattern, category, fn, is_bold)
        # for category in ("keywords", "storage"):
        #     for pattern in data["repository"][category]["patterns"]:
        #         write_cpp_block(pattern, category, fn)

        fn.write("}\n")


if __name__ == "__main__":
    build_cpp()
