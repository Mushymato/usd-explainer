import json
from hashlib import sha256

HEADER = """// singleton class describing rules for USD language, auto-generated by syntax_definitions_to_cpp.py
#include "UsdHighlighterSyntax.h"

UsdHighlighterSyntax::UsdHighlighterSyntax()
{
"""

FOOTER = """}
"""


def hash_color(name):
    """autogenerate a color"""
    hashbytes = sha256(name.encode("UTF-8")).digest()
    return [
        min(255, int.from_bytes((bt,), byteorder="big") + 50) for bt in hashbytes[-3:]
    ]


def stringliteral_line(member, string):
    return f'rule.{member} = QStringLiteral("{string}")'


def regex_line(member, expr):
    escaped_expr = expr.replace("\\", "\\\\").replace('"', '\\"')
    return f'rule.{member} = QRegularExpression(QStringLiteral("{escaped_expr}"))'


def write_style(fn, style, style_info):
    """write QTextCharFormat definition"""
    lines = []
    lines.append(f"QTextCharFormat style_{style} = QTextCharFormat()")
    color = style_info["color"]
    lines.append(
        f"style_{style}.setForeground(QColor({color[0]}, {color[1]}, {color[2]}))"
    )
    if style_info.get("bold"):
        lines.append(f"style_{style}.setFontWeight(QFont::Weight::Bold)")
    fn.write("    ")
    fn.write(";\n    ".join(lines))
    fn.write(";\n")


def write_rule(fn, name, rule):
    """write SyntaxRule definition"""
    lines = []
    lines.append(f"rule = SyntaxRule()")
    lines.append(stringliteral_line("name", name))
    default_style = rule["style"][0]
    for style in rule["style"]:
        lines.append(f"rule.styles.append(style_{style or default_style})")
    lines.append(regex_line("pattern", rule["pattern"]))
    try:
        lines.append(regex_line("patternEnd", rule["patternEnd"]))
        lines.append("rule.isRange = true")
    except KeyError:
        pass
    if rule.get("multiline"):
        lines.append("rule.isMultiline = true")
    lines.append(stringliteral_line("label", rule.get("label", name)))
    lines.append("syntaxRules.append(rule)")

    fn.write(f"    // {name}\n    ")
    fn.write(";\n    ".join(lines))
    fn.write(";\n")


def build_cpp(definitions_file, output_file):
    """write cpp equiv of json definitions"""
    with open(definitions_file, "r") as fn:
        definitions = json.load(fn)
    with open(output_file, "w") as fn:
        fn.write(HEADER)
        # check for used styles, including implicit
        used_styles = set()
        for name, rule in definitions["rules"].items():
            default_style = name.split(".")[0]
            try:
                if not rule["style"][0]:
                    used_styles.add(default_style)
                    rule["style"][0] = default_style
                for style in rule["style"]:
                    if style:
                        used_styles.add(style)
            except KeyError:
                used_styles.add(default_style)
                rule["style"] = [default_style]
        # write styles
        fn.write("    // styles\n")
        # fn.write("    QTextCharFormat style_empty = QTextCharFormat();\n")
        for style in sorted(used_styles):
            try:
                style_info = definitions["styles"][style]
                if not "color" in style_info:
                    style_info["color"] = hash_color(style)
            except KeyError:
                style_info = {"color": hash_color(style)}
            write_style(fn, style, style_info)
        # write rules
        fn.write("    // rules\n")
        fn.write("    syntaxRules = QList<SyntaxRule>();\n")
        fn.write("    SyntaxRule rule;\n")
        for name, rule in definitions["rules"].items():
            write_rule(fn, name, rule)

        fn.write(FOOTER)


if __name__ == "__main__":
    build_cpp("src/syntax/syntax_definitions_USD.json", "src/UsdHighlighterSyntax.cpp")
